#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define SYM    1
#define NAV    2
#define HEX    3
#define FUN    4
#define ADJ    5
#define FVBASE 6
#define FVFLIP 7
#define FVNAVI 8
#define FVNUMP 9
#define FVSYMB 10
#define LOCK   11
#define ULOC   12

#define NTAB LC(PGDN) /* Next tab */
#define PTAB LC(PGUP) /* Previous tab */
#define SFTAB LS(TAB) /* Shift-tab */

#define COMBO_TIMEOUT 25

/ {
  behaviors { // {{{
    hm: homerow_mods { // Letter mods
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping_term_ms = <150>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    th: tap_hold { // Other mods (enter)
      compatible = "zmk,behavior-hold-tap";
      label = "TAP_HOLD";
      #binding-cells = <2>;
      tapping_term_ms = <150>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&kp>;
    };
    mcomma: mod_morph_comma {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_MORPH_COMMA";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp MINUS>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mdot: mod_morph_dot {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_MORPH_DOT";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp SLASH>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mbspc: mod_morph_bspc {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_MORPH_BSPC";
      #binding-cells = <0>;
      bindings = <&kp BSPC>, <&kp N1>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
		tdsft: tap_dance_0 {
      compatible = "zmk,behavior-tap-dance";
      label = "TAP_DANCE_0";
      #binding-cells = <0>;
      tapping-term-ms = <200>;
      bindings = <&kp LSFT>, <&kp LC(LGUI)>;
    };
  }; // }}}

  combos { // {{{
    compatible = "zmk,combos";
    combo_k_h {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <25 26>; // [ k h , . ^ ]
      bindings = <&kp QUOT>; //     └─┴─────────› '
      layers = <0 NAV>;
    };
    combo_h_comma {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <26 27>; // [ k h , . ^ ]
      bindings = <&kp RET>; //        └─┴───────› enter
      layers = <0 NAV>;
    };
    combo_comma_dot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <27 28>; // [ k h , . ^ ]
      bindings = <&kp LA(TAB)>; //      └─┴─────› alt-tab
    };
    combo_h_dot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <26 28>; // [ k h , . ^ ]
      bindings = <&kp ESC>; //        └───┴─────› esc
      layers = <0 NAV>;
    };
  }; // }}}

  keymap {
    compatible = "zmk,keymap";

    // ┌─────────────────────┐┌─────────────────────┐
    // │ q^  w   f   p   b   ││ j   l   u   y   bks │
    // │ a   r   s   t   g   ││ m   n   e   i   o   │
    // │ z*  x   c   d   v   ││ k*  h   ,_  .?  ent^│
    // └─────────────────────┤├─────────────────────┘
    //         │ gui SYM ↑   ││ ──  NAV alt │
    //         └─────────────┘└─────────────┘
    default_layer { // Base (Colemak DH) {{{
      bindings = <
        &hm LCTL Q  &kp W     &kp F     &kp P     &kp B       &kp J      &kp L     &kp U     &kp Y     &mbspc
        &kp A       &kp R     &kp S     &kp T     &kp G       &kp M      &kp N     &kp E     &kp I     &kp O
        &hm LGUI Z  &kp X     &kp C     &kp D     &kp V       &hm LGUI K &kp H     &mcomma   &mdot     &th LCTL RET
                              &kp LGUI  &mo SYM   &tdsft      &kp SPACE  &mo NAV   &kp LALT
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │ '   "   ^   ?   `   ││ [   <   =   >   ]   │
    // │ !   @   #   $   %   ││ {   (   :   )   }   │
    // │ \   ~   |   &   ;   ││ /   *   -   +   _   │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   ·   ADJ ││ ·   HEX  ·  │
    //         └─────────────┘└─────────────┘
    sym_layer { // Symbols {{{
      bindings = <
        &kp QUOT  &kp DQT   &kp CARET &kp QMARK &kp GRAVE   &kp LBKT      &kp LT    &kp EQUAL &kp GT    &kp RBKT
        &kp EXCL  &kp AT    &kp HASH  &kp DLLR  &kp PRCNT   &kp LBRC      &kp LPAR  &kp COLON &kp RPAR  &kp RBRC
        &kp BSLH  &kp TILDE &kp PIPE  &kp AMPS  &kp SEMI    &kp SLASH     &kp STAR  &kp MINUS &kp PLUS  &kp UNDER
                            &trans    &mo FUN   &mo ADJ     &lt NAV SPACE &mo HEX   &trans
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │ ctl cmd ⇤   ⇥   opt ││ p↑  hom ▲   end bks │
    // │ 1   2   3   4   5   ││ p↓  ◀   ▼   ▶   ent │
    // │ 6   7   8   9   0   ││ esc t‹  t›  .   del │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   FN  ·   ││ ·   ▓▓  ·   │
    //         └─────────────┘└─────────────┘
    nav_layer { // Navigation {{{
      bindings = <
        &kp LCTRL &kp LGUI  &kp SFTAB &kp TAB   &kp LALT     &kp PGUP      &kp HOME  &kp UP    &kp END   &lt HEX BSPC
        &kp N1    &kp N2    &kp N3    &kp N4    &kp N5       &kp PGDN      &kp LEFT  &kp DOWN  &kp RIGHT &kp RET
        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0       &kp ESC       &kp PTAB  &kp NTAB  &kp DOT   &th LCTL DEL
                            &trans    &mo FUN   &trans       &lt NAV SPACE &mo FUN   &trans
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │                 #   ││ ,   A   B   C   bks │
    // │ 1   2   3   4   5   ││ .   D   E   F   ent │
    // │ 6   7   8   9   0   ││ /   *   -   +   :   │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   ·   ──  ││ ──  ▓▓  ·   │
    //         └─────────────┘└─────────────┘
    hex_layer { // Hex input {{{
      bindings = <
        &none     &kp COMMA &kp DOT   &kp COLON &kp HASH     &kp COMMA &kp A     &kp B     &kp C     &kp BSPC
        &kp N1    &kp N2    &kp N3    &kp N4    &kp N5       &kp DOT   &kp D     &kp E     &kp F     &kp RET
        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0       &kp SLASH &kp STAR  &kp MINUS &kp PLUS  &kp COLN
                            &none     &none     &kp SPC      &kp SPC   &none     &none
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │ f11 f12 .   ps  .   ││ .   .   .   .   b⁺  │
    // │ f1  f2  f3  f4  f5  ││ .   .   .   .   b⁻  │
    // │ f6  f7  f8  f9  f10 ││ v⁻  v⁺  ply nxt .   │
    // └─────────────────────┘└─────────────────────┘
    fun_layer { // Function {{{
      bindings = <
        &kp F11   &kp F12   &none     &kp PSCRN &none       &none        &none        &none      &none      &kp C_BRI_UP
        &kp F1    &kp F2    &kp F3    &kp F4    &kp F5      &none        &none        &none      &none      &kp C_BRI_DN
        &kp F6    &kp F7    &kp F8    &kp F9    &kp F10     &kp C_VOL_DN &kp C_VOL_UP &kp C_PLAY &kp C_NEXT &none
                            &trans    &trans    &trans      &trans       &trans       &trans
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │ boot.   .   .   clr ││ p↑  hom ▲   end boot│
    // │ res .   b1  b2  usb ││ p↓  ◀   ▼   ▶   ent │
    // │ loc .   b3  b4  bt  ││ b1  b2  b3  b4  res │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   FV  ▓▓  ││ tog bt  usb │
    //         └─────────────┘└─────────────┘
    adj_layer { // Adjust {{{
      bindings = <
        &bootloader  &none        &none        &none        &bt BT_CLR     &kp PGUP     &kp HOME     &kp UP       &kp END      &bootloader
        &reset       &none        &bt BT_SEL 0 &bt BT_SEL 1 &out OUT_USB   &kp PGDN     &kp LEFT     &kp DOWN     &kp RIGHT    &th LCTL RET
        &tog LOCK    &none        &bt BT_SEL 2 &bt BT_SEL 3 &out OUT_BLE   &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &reset
                                  &trans       &tog FVBASE  &none          &out OUT_TOG &out OUT_BLE &out OUT_USB
      >;
    }; // }}}

    fvbase_layer { // FrogV base {{{
      // Base:                   Flip:                   Nav:
      // ┌─────────────────────┐ ┌─────────────────────┐ ┌─────────────────────┐
      // │Ns   c   n   i   g   │ │ q   w   m   j   k   │ │ ░░  p↑  ▲   p↓  bks │
      // │ ●   t   h   e   o   │ │ ░░  p   l   x   ↑   │ │ .   ◀   ▼   ▶   ent │
      // │Sf   d   r   a   u   │ │ .   b   v   y   z   │ │ .   hom end ⇥   esc │
      // └───────┐ ctl num spc │ └───────┐ ctl gui ↑   │ └───────┐ ctl gui ↑   │
      //         └─────────────┘         └─────────────┘         └─────────────┘
      bindings = <
        &lt FVNAVI S &kp C     &kp N     &kp I      &kp G        &none       &none     &none     &none     &none
        &sl FVFLIP   &kp T     &kp H     &kp E      &kp O        &none       &none     &none     &none     &none
        &lt FVSYMB F &kp D     &kp R     &kp A      &kp U        &none       &none     &none     &none     &none
                               &kp LCTL  &mo FVNUMP &kp SPACE    &tog FVBASE &none     &none
      >;
    };

    fvflip_layer { // FrogV flip
      bindings = <
        &kp Q      &kp W     &kp M     &kp J     &kp K       &trans    &trans    &trans    &trans    &trans
        &trans     &kp P     &kp L     &kp X     &sk LSFT    &trans    &trans    &trans    &trans    &trans
        &kp Q      &kp B     &kp V     &kp Y     &kp Z       &trans    &trans    &trans    &trans    &trans
                             &kp LCTL  &kp LGUI  &kp LSFT    &trans    &trans    &trans
      >;
    };

    fvnavi_layer { // FrogV navigation
      bindings = <
        &trans     &kp PGUP  &kp UP    &kp PGDN   &kp BSPC     &trans    &trans    &trans    &trans    &trans
        &none      &kp LEFT  &kp DOWN  &kp RIGHT  &kp RET      &trans    &trans    &trans    &trans    &trans
        &none      &kp HOME  &kp END   &kp TAB    &kp ESC      &trans    &trans    &trans    &trans    &trans
                             &kp LCTL  &kp LGUI   &kp LSFT     &trans    &trans    &trans
      >;
    };

    fvnump_layer { // FrogV number pad
      // Num:                    Sym:
      // ┌─────────────────────┐ ┌─────────────────────┐
      // │         gui ↑   ext │ │     !   [   ]   \   │
      // │ 1   2   3   4   5   │ │     '   =   -   /   │
      // │ 6   7   8   9   0   │ │     ;   ,   .   '   │
      // └───────┐ alt .   ctl │ └───────┐         ↑   │
      //         └─────────────┘         └─────────────┘
      bindings = <
        &none       &none     &kp LGUI  &kp LSFT   &tog FVBASE  &trans    &trans    &trans    &trans    &trans
        &kp N1      &kp N2    &kp N3    &kp N4     &kp N5       &trans    &trans    &trans    &trans    &trans
        &kp N6      &kp N7    &kp N8    &kp N9     &kp N0       &trans    &trans    &trans    &trans    &trans
                              &kp LALT  &trans     &kp LCTL     &trans    &trans    &trans
      >;
    };

    fvsymb_layer { // FrogV symbol
      bindings = <
        &none     &kp EXCL  &kp LBKT  &kp RBKT   &kp BSLH     &trans    &trans    &trans    &trans    &trans
        &none     &kp GRAVE &kp EQUAL &kp MINUS  &kp LGUI     &trans    &trans    &trans    &trans    &trans
        &none     &kp SEMI  &kp COMMA &kp DOT    &kp QUOT     &trans    &trans    &trans    &trans    &trans
                            &trans    &trans     &kp LSFT     &trans    &trans    &trans
      >;
    }; // }}}

    lock_layer { // Lock {{{
      bindings = <
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &mo ULOC  &none     &none     &none     &none        &none     &none     &none     &none     &none
                            &none     &none     &mo ULOC     &none     &none     &none
      >;
    };

    unlock_layer { // Unlock
      bindings = <
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &tog LOCK &none     &none     &none     &none        &none     &none     &none     &none     &none
                            &none     &none     &tog LOCK    &none     &none     &none
      >;
    }; // }}}
  };
};

// vim:ft=c:fdm=indent
// https://zmk.dev/docs/codes/
