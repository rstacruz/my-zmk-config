#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>

#define SYM    1
#define NAV    2
#define HEX    3
#define FUN    4
#define ADJ    5
#define MACRO  6
#define FVBASE 7
#define FVFLIP 8
#define FVNAVI 9
#define FVNUMP 10
#define FVSYMB 11
#define GAME   12
#define GAMEX  13
#define GAMEY  14
#define LOCK   15
#define ULOC   16

#define SFTAB LS(TAB) /* Shift-tab */
#define ZMUTE LG(LS(A)) /* Zoom: mute */
#define ZHAND LG(LS(R)) /* Zoom: raise hand */

#define COMBO_TIMEOUT 30

/ {
  behaviors {
    hm: homerow_mods { // Letter mods
      compatible = "zmk,behavior-hold-tap";
      label = "HOMEROW_MODS";
      #binding-cells = <2>;
      tapping_term_ms = <150>;
      flavor = "tap-preferred";
      bindings = <&kp>, <&kp>;
    };
    th: tap_hold { // Other mods (enter)
      compatible = "zmk,behavior-hold-tap";
      label = "TAP_HOLD";
      #binding-cells = <2>;
      tapping_term_ms = <150>;
      flavor = "hold-preferred";
      bindings = <&kp>, <&kp>;
    };
    mcomma: mod_morph_comma {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_MORPH_COMMA";
      #binding-cells = <0>;
      bindings = <&kp COMMA>, <&kp MINUS>; // [sft ,] ─› [_]
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mdot: mod_morph_dot {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_MORPH_DOT";
      #binding-cells = <0>;
      bindings = <&kp DOT>, <&kp MINUS>; // [sft .] ─› [_]
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
    mbspc: mod_morph_bspc {
      compatible = "zmk,behavior-mod-morph";
      label = "MOD_MORPH_BSPC";
      #binding-cells = <0>;
      bindings = <&kp BSPC>, <&kp N1>;
      mods = <(MOD_LSFT|MOD_RSFT)>;
    };
		// tdsft: tap_dance_0 {
    //   compatible = "zmk,behavior-tap-dance";
    //   label = "TAP_DANCE_0";
    //   #binding-cells = <0>;
    //   tapping-term-ms = <200>;
    //   bindings = <&kp LSFT>, <&kp LC(LGUI)>;
    // };
  };

  combos {
    compatible = "zmk,combos";
    combo_h_comma {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <26 27>; // [ k h , . ^ ]
      bindings = <&kp QUOT>; //       └─┴───────› '
      layers = <0>;
    };
    combo_comma_dot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <27 28>; // [ k h , . ^ ]
      bindings = <&kp LA(TAB)>; //      └─┴─────› alt-tab
      layers = <0>;
    };
    combo_h_dot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <26 28>; // [ k h , . ^ ]
      bindings = <&kp QMARK>; //      └───┴─────› ?
      layers = <0>;
    };
    combo_h_comma_dot {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <26 27 28>; // [ k h , . ^ ]
      bindings = <&kp LC(BSPC)>; //      └─┴─┴─────› ctrl-backspace
      layers = <0>;
    };
    combo_k_h {
      timeout-ms = <COMBO_TIMEOUT>;
      key-positions = <25 26>; // [ k h , . ^ ]
      bindings = <&kp ESC>; //      └─┴─────────› esc
      layers = <0>;
    };
  };

  keymap {
    compatible = "zmk,keymap";

    // ┌─────────────────────┐┌─────────────────────┐
    // │ q^  w   f   p   b   ││ j   l   u   y   bks │ Colemak DH
    // │ a   r   s   t   g   ││ m   n   e   i   o   │
    // │ z   x   c   d   v   ││ k   h   ,_  ._  ent^│ (ent-ctrl)
    // └─────────────────────┤├─────────────────────┘
    //         │ gui SYM ↑   ││ ──  NAV alt │
    //         └─────────────┘└─────────────┘
    default_layer { // {{{
      bindings = <
        &hm LCTL Q  &kp W     &kp F     &kp P     &kp B       &kp J      &kp L     &kp U     &kp Y     &kp BSPC
        &kp A       &kp R     &kp S     &kp T     &kp G       &kp M      &kp N     &kp E     &kp I     &kp O
        &kp Z       &kp X     &kp C     &kp D     &kp V       &kp K      &kp H     &mcomma   &mdot     &th LCTL RET
                              &kp LGUI  &mo SYM   &kp LSFT    &kp SPACE  &mo NAV   &kp LALT
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │ '   "   ^   ?   `   ││ [   <   =   >   ]   │ Symbols
    // │ !   @   #   $   %   ││ {   (   :   )   }   │
    // │ \   ~   |   ;   &   ││ /   *   -   +   _   │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   ▓▓  ADJ ││ ·   FUN  ·  │
    //         └─────────────┘└─────────────┘
    sym_layer { // {{{
      bindings = <
        &kp QUOT  &kp DQT   &kp CARET &kp QMARK     &kp GRAVE   &kp LBKT      &kp LT    &kp EQUAL &kp GT    &kp RBKT
        &kp EXCL  &kp AT    &kp HASH  &lt NAV DLLR  &kp PRCNT   &kp LBRC      &kp LPAR  &kp COLON &kp RPAR  &kp RBRC
        &kp BSLH  &kp TILDE &kp PIPE  &kp SEMI      &kp AMPS    &kp SLASH     &kp STAR  &kp MINUS &kp PLUS  &kp UNDER
                            &trans    &mo FUN       &mo ADJ     &lt NAV SPACE &mo FUN   &trans
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │ ctl gui ⇤   ⇥   alt ││ ,   hom ▲   end del │ Navigation
    // │ 1   2   3   4   5   ││ .   ◀   ▼   ▶   ent │
    // │ 6   7   8   9   0   ││     p↑  p↓  esc ctl │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   HEX ·   ││ ─── ▓▓  alt │
    //         └─────────────┘└─────────────┘
    nav_layer { // {{{
      bindings = <
        &kp RCTRL &kp RGUI  &kp SFTAB &kp TAB   &kp LALT     &kp COMMA &kp HOME  &kp UP    &kp END   &kp DEL
        &kp N1    &kp N2    &kp N3    &kp N4    &kp N5       &kp DOT   &kp LEFT  &kp DOWN  &kp RIGHT &kp RET
        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0       &kp ESC   &kp PGUP  &kp PGDN  &kp ESC   &kp LCTL
                            &trans    &mo HEX   &trans       &kp SPACE &mo FUN   &trans
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │     ,   .   :   #   ││ ,   A   B   C   bks │ Hex input
    // │ 1   2   3   4   5   ││ .   D   E   F   ent │
    // │ 6   7   8   9   0   ││ /   *   -   +       │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   ▓▓  ──  ││ ──  ·   ·   │
    //         └─────────────┘└─────────────┘
    hex_layer { // {{{
      bindings = <
        &none     &kp COMMA &kp DOT   &kp COLON &kp HASH     &kp COMMA &kp A     &kp B     &kp C     &kp BSPC
        &kp N1    &kp N2    &kp N3    &kp N4    &kp N5       &kp DOT   &kp D     &kp E     &kp F     &kp RET
        &kp N6    &kp N7    &kp N8    &kp N9    &kp N0       &kp SLASH &kp STAR  &kp MINUS &kp PLUS  &kp COLN
                            &none     &none     &kp SPC      &kp SPC   &none     &none
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │ f11 f12 psc ply nxt ││ .   .   .   .   b⁺  │ Function
    // │ f1  f2  f3  f4  f5  ││ .   .   .   .   b⁻  │
    // │ f6  f7  f8  f9  f10 ││ .   v-  v+  .   .   │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   ·   ──  ││ ──  ▓▓  ·   │
    //         └─────────────┘└─────────────┘
    fun_layer { // Function {{{
      bindings = <
        &kp F11   &kp F12   &kp PSCRN &kp C_PLAY &kp C_NEXT  &kp C_VOL_UP &none        &none        &none      &kp C_BRI_UP
        &kp F1    &kp F2    &kp F3    &kp F4     &kp F5      &kp C_VOL_DN &none        &none        &none      &kp C_BRI_DN
        &kp F6    &kp F7    &kp F8    &kp F9     &kp F10     &none        &kp C_VOL_DN &kp C_VOL_UP &none      &none
                            &trans    &trans     &trans      &trans       &trans       &trans
      >;
    }; // }}}

    // ┌─────────────────────┐┌─────────────────────┐
    // │lock .   .   .   clr ││ .   .   .   .   rset│ Adjust
    // │game .   .   .   usb ││ .   .   .   .   .   │
    // │BOOT b2  b1  b0  bt  ││ .   b0  b1  b2  BOOT│
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   FRV ▓▓  ││ tog bt  usb │
    //         └─────────────┘└─────────────┘
    adj_layer { // {{{
      bindings = <
        &tog LOCK    &none        &none        &none        &bt BT_CLR     &kp PGUP     &kp HOME     &kp UP       &kp END      &reset
        &tog GAME    &tog MACRO   &none        &none        &out OUT_USB   &kp PGDN     &kp LEFT     &kp DOWN     &kp RIGHT    &th LCTL RET
        &bootloader  &bt BT_SEL 2 &bt BT_SEL 1 &bt BT_SEL 0 &out OUT_BLE   &none        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bootloader
                                  &trans       &tog FVBASE  &none          &out OUT_TOG &out OUT_BLE &out OUT_USB
      >;
    }; // }}}

    macro_layer { // macro {{{
      // ┌─────────────────────┐┌─────────────────────┐
      // │ NAV .   .   .   .   ││ .   .   .   .   .   │ Macro
      // │ .   .   .   .   .   ││ .   .   .   .   .   │
      // │ nx  pl  v-  v+  hand││ .   .   .   .   .   │
      // └───────┐─────────────││─────────────┌───────┘
      //         │exit ·   mute││ ──  ·   ·   │
      //         └─────────────┘└─────────────┘
      bindings = <
        &mo FVNAVI &kp PGUP   &kp UP       &kp PGDN     &tog MACRO   &none     &none     &none     &none     &none
        &none      &kp LEFT   &kp DOWN     &kp RIGHT    &kp ZMUTE    &none     &none     &none     &none     &none
        &kp C_NEXT &kp C_PLAY &kp C_VOL_DN &kp C_VOL_UP &kp ZHAND    &none     &none     &none     &none     &none
                              &tog MACRO   &none     &kp ZMUTE    &none     &none     &none
      >;
    }; // }}}

    fvbase_layer { // FrogV base {{{
      // Base:                   Flip:                   Nav:
      // ┌─────────────────────┐ ┌─────────────────────┐ ┌─────────────────────┐
      // │ s*  c   n   i   g   │ │ q   w   m   j   k   │ │ ░░  p↑  ▲   p↓  bks │
      // │ ●   t   h   e   o   │ │ ░░  p   l   x   ↑   │ │ .   ◀   ▼   ▶   ent │
      // │ f*  d   r   a   u   │ │ .   b   v   y   z   │ │ .   hom end ⇥   esc │
      // └───────┐ ctl num spc │ └───────┐ ctl gui ↑   │ └───────┐ ctl gui ↑   │
      //         └─────────────┘         └─────────────┘         └─────────────┘
      bindings = <
        &lt FVNAVI S &kp C     &kp N     &kp I      &kp G        &none       &none     &none     &none     &none
        &sl FVFLIP   &kp T     &kp H     &kp E      &kp O        &none       &none     &none     &none     &none
        &lt FVSYMB F &kp D     &kp R     &kp A      &kp U        &none       &none     &none     &none     &none
                               &kp LCTL  &mo FVNUMP &kp SPACE    &tog FVBASE &none     &tog FVBASE
      >;
    };

    fvflip_layer { // FrogV flip
      bindings = <
        &kp Q      &kp W     &kp M     &kp J     &kp K       &trans    &trans    &trans    &trans    &trans
        &trans     &kp P     &kp L     &kp X     &sk LSFT    &trans    &trans    &trans    &trans    &trans
        &kp Q      &kp B     &kp V     &kp Y     &kp Z       &trans    &trans    &trans    &trans    &trans
                             &kp LCTL  &kp LGUI  &kp LSFT    &trans    &trans    &trans
      >;
    };

    fvnavi_layer { // FrogV navigation
      bindings = <
        &trans     &kp PGUP  &kp UP    &kp PGDN   &kp BSPC     &trans    &trans    &trans    &trans    &trans
        &none      &kp LEFT  &kp DOWN  &kp RIGHT  &kp RET      &trans    &trans    &trans    &trans    &trans
        &none      &kp HOME  &kp END   &kp TAB    &kp ESC      &trans    &trans    &trans    &trans    &trans
                             &kp LCTL  &kp LGUI   &kp LSFT     &trans    &trans    &trans
      >;
    };

    fvnump_layer { // FrogV number pad
      // Num:                    Sym:
      // ┌─────────────────────┐ ┌─────────────────────┐
      // │         gui ↑   ext │ │     !   [   ]   \   │
      // │ 1   2   3   4   5   │ │     '   =   -   /   │
      // │ 6   7   8   9   0   │ │     ;   ,   .   '   │
      // └───────┐ alt .   ctl │ └───────┐         ↑   │
      //         └─────────────┘         └─────────────┘
      bindings = <
        &none       &none     &kp LGUI  &kp LSFT   &tog FVBASE  &trans    &trans    &trans    &trans    &trans
        &kp N1      &kp N2    &kp N3    &kp N4     &kp N5       &trans    &trans    &trans    &trans    &trans
        &kp N6      &kp N7    &kp N8    &kp N9     &kp N0       &trans    &trans    &trans    &trans    &trans
                              &kp LALT  &trans     &kp LCTL     &trans    &trans    &trans
      >;
    };

    fvsymb_layer { // FrogV symbol
      bindings = <
        &none     &kp EXCL  &kp LBKT  &kp RBKT   &kp BSLH     &trans    &trans    &trans    &trans    &trans
        &none     &kp GRAVE &kp EQUAL &kp MINUS  &kp LGUI     &trans    &trans    &trans    &trans    &trans
        &none     &kp SEMI  &kp COMMA &kp DOT    &kp QUOT     &trans    &trans    &trans    &trans    &trans
                            &trans    &trans     &kp LSFT     &trans    &trans    &trans
      >;
    }; // }}}

    // ┌─────────────────────┐ ┌─────────────────────┐
    // │ tab q   w   e   r   │ │ y   u   i   o   p   │ Game
    // │ sft a   s   d   f   │ │ t   j   k   l   ent │
    // │ ctl 1   2   3   4   │ │ n   m           esc │
    // └───────┐ ▲Y  ▲X  spc │ │ spc XX exit ┌───────┘
    // ┌─────────────────────┐ ┌─────────────────────┐
    // │ f1  f2  f3  f4  f5  │ │         ↑       bs  │ X
    // │ 5   6   7   g   h   │ │     ←   ↓   →   ent │
    // │ z   x   c   v   b   │ │                 esc │
    // └───────┐     ━━  alt │ │        exit ┌───────┘
    // ┌─────────────────────┐ ┌─────────────────────┐
    // │ y   u   i   o   p   │ │         ↑       bs  │ Y
    // │ t   j   k   l   ent │ │     ←   ↓   →   ent │
    // │ n   m   c   v   esc │ │                 esc │
    // └───────┐ ━━          │ │        exit ┌───────┘
    //         └─────────────┘ └─────────────┘

    game_layer {
      bindings = <
        &kp TAB   &kp Q     &kp W     &kp E     &kp R        &kp Y     &kp U     &kp I     &kp O     &kp P
        &kp LSFT  &kp A     &kp S     &kp D     &kp F        &kp T     &kp J     &kp K     &kp L     &kp RET
        &kp LCTL  &kp N1    &kp N2    &kp N3    &kp N4       &kp N     &kp M     &none     &none     &kp ESC
                            &mo GAMEY &mo GAMEX &kp SPC      &kp SPC   &mo GAMEX &tog GAME
      >;
    };

    game_x_layer {
      bindings = <
        &kp F1    &kp F2    &kp F3    &kp F4    &kp F5       &none     &none     &kp UP    &none     &kp BSPC
        &kp N5    &kp N6    &kp N7    &kp G     &kp H        &none     &kp LEFT  &kp DOWN  &kp RIGHT &kp RET
        &kp Z     &kp X     &kp C     &kp V     &kp B        &none     &none     &none     &none     &kp ESC
                            &none     &none     &kp LALT     &none     &none     &tog GAME
      >;
    };

    game_y_layer {
      bindings = <
        &kp Y     &kp U     &kp I     &kp O     &kp P        &none     &none     &kp UP    &none     &kp BSPC
        &kp T     &kp J     &kp K     &kp L     &kp RET      &none     &kp LEFT  &kp DOWN  &kp RIGHT &kp RET
        &kp N     &kp M     &kp COMMA &kp DOT   &kp ESC      &none     &none     &none     &none     &kp ESC
                            &none     &none     &none        &none     &none     &tog GAME
      >;
    };

    // ┌─────────────────────┐┌─────────────────────┐
    // │ .   .   .   .   .   ││ .   .   .   .   .   │
    // │ .   .   .   .   .   ││ .   .   .   .   .   │
    // │ .   .   .   .   .   ││ .   .   .   .   .   │
    // └───────┐─────────────││─────────────┌───────┘
    //         │ ·   ·   ──  ││ ──  ·   ·   │
    //         └─────────────┘└─────────────┘
    lock_layer { // Lock {{{
      bindings = <
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &mo ULOC  &none     &none     &none     &none        &none     &none     &none     &none     &none
                            &none     &none     &mo ULOC     &none     &none     &none
      >;
    };

    unlock_layer { // Unlock
      bindings = <
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &none     &none     &none     &none     &none        &none     &none     &none     &none     &none
        &tog LOCK &none     &none     &none     &none        &none     &none     &none     &none     &none
                            &none     &none     &tog LOCK    &none     &none     &none
      >;
    }; // }}}
  };
};

// vim:ft=c:fdm=indent
// https://zmk.dev/docs/codes/
